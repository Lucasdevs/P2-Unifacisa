Lista Strings

2) Na primeira linha, quando criamos uma String, nós instanciamos um objeto da classe String, 
Ao instanciarmos uma String sem a palavra reservada new(Como na primeira linha do exemplo), 
então o Java tentará economizar memória, verificando se já existe um objeto com aquele mesmo
conteúdo criado. Em caso positivo, ele reaproveita aquele objeto, atribuindo seu endereço de
memória à variável. Por outro lado, sempre que uma String for criada usando explicitamente a 
palavra reservada new(Como na segunda linha), então independente de já haver um objeto String
com aquele conteúdo criado, a JVM criará um novo objeto.

3) String pool é uma área de armazenamento no heap Java onde se alocam as strings. Ao instanciarmos
uma String a JVM tentará economizar memória verificando se já existeum objeto com o mesmo conteúdo.
Em caso positivo, ele reaproveita aquele objeto, atribuindo seu endereço de memória à variável. Porém,
sempre que uma String for criada usando explicitamente a palavra reservada NEW, então independente de
já haver um objeto String com aquele conteúdo criado, a JVM criará um novo objeto.

4) Strings são objetos imutáveis, logo, isso quer dizer que toda vez que você modifica uma String, na verdade,
você cria um novo objeto String e o anterior ficará ocupando espaço na memória até o Garbage Collector ser
executado e removê-lo.  No exemplo, armazena-se o conteúdo "Eduardo", logo em seguida ao armazenar o conteúdo 
"de", a String "Eduardo de" é criada, porém a String "Eduardo" ainda existe na memória e não é utilizada. Após
a String "Eduardo de Lucena" ser criada, a String "Eduardo de" e "Eduardo" ainda existem na memória mas não são
utilizadas.

5)  As classes StringBuffer e StringBuilder, por sua vez, podem ser utilizadas para reduzir a criação de 
objetos desnecessários na memória, possibilitando que uma mesma String seja modificada diversas vezes. Saber
como funciona a criação de objetos String no pool e na memória, bem como a utilização e o resultado da execução 
dos métodos desta classe melhora o desempenho do código. Esta melhoria também é conseguida através da utilização 
das classes StringBuffer e StringBuilder, pois elas trabalham com objetos String mutáveis que ocupam menos espaço 
em memória.
